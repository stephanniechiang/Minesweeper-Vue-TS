{"remainingRequest":"/home/stephanniechiang/Documents/Personal/Minesweeper-Vue-TS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stephanniechiang/Documents/Personal/Minesweeper-Vue-TS/src/components/MineField.vue?vue&type=style&index=0&id=b0089632&scoped=true&lang=less&","dependencies":[{"path":"/home/stephanniechiang/Documents/Personal/Minesweeper-Vue-TS/src/components/MineField.vue","mtime":1600575833537},{"path":"/home/stephanniechiang/Documents/Personal/Minesweeper-Vue-TS/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/stephanniechiang/Documents/Personal/Minesweeper-Vue-TS/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/stephanniechiang/Documents/Personal/Minesweeper-Vue-TS/node_modules/less-loader/dist/cjs.js","mtime":1600716796297},{"path":"/home/stephanniechiang/Documents/Personal/Minesweeper-Vue-TS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/stephanniechiang/Documents/Personal/Minesweeper-Vue-TS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#minefield {\n  letter-spacing: 0px;\n  font-size: 0px;\n}\n",{"version":3,"sources":["MineField.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiTA;AACA;AACA;AACA","file":"MineField.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"minefield\">\n    <div v-for=\"row in rows\" :key=\"row\">\n      <FieldCell\n        v-for=\"col in cols\"\n        :key=\"row + '-' + col + '-' + cells[row - 1][col - 1].hidden + '-' + cells[row - 1][col - 1].flagged\"\n        :field=\"cells[row - 1][col - 1]\"\n        :handleReveal=\"handleReveal\"\n        :handleToggleFlag=\"handleToggleFlag\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Watch, Vue } from 'vue-property-decorator';\n\nimport FieldCell from './FieldCell.vue';\nimport Cell from '../definitions/Cell';\nimport MousePosition from '../others/MousePosition';\n\n@Component({\n  components: {\n    FieldCell,\n  },\n})\nexport default class MineField extends Vue {\n  @Prop() public rows!: number;\n  @Prop() public cols!: number;\n  @Prop() public mines!: number;\n\n  public activeMineField: boolean = true;\n\n  public cells: Cell[][] = [];\n\n  public flaggedMines: number = 0;\n\n  public minesGenerated: boolean = false;\n\n  public handleReveal(cell: Cell) {\n    if (!this.activeMineField) {\n      return;\n    }\n    this.revealCells(cell.row, cell.col);\n\n    this.$forceUpdate();\n  }\n\n  public handleToggleFlag(cell: Cell) {\n    if (!this.activeMineField) {\n      return;\n    }\n\n    this.cells[cell.row][cell.col].flagged = !cell.flagged;\n\n    if (this.cells[cell.row][cell.col].flagged) {\n      this.flaggedMines++;\n    } else {\n      this.flaggedMines--;\n    }\n    this.$emit('handle-flagged-mines', this.flaggedMines);\n\n    this.$forceUpdate();\n  }\n\n  public handleSpace(e: any) {\n    if (!this.activeMineField) {\n      return;\n    }\n\n    const el: Element | null = document.elementFromPoint(\n      MousePosition.x,\n      MousePosition.y,\n    );\n\n    if (el) {\n      const parent: Element | null = el.closest('.cell-wrapper');\n\n      if (!parent) {\n        return;\n      }\n\n      const rowString: string | undefined = (parent as HTMLElement).dataset.row;\n      const colString: string | undefined = (parent as HTMLElement).dataset.col;\n\n      if (rowString && colString) {\n        const row: number = Number(rowString);\n        const col: number = Number(colString);\n        if (this.validBoundaries(row, col)) {\n          const cell = this.cells[row][col];\n          if (cell.hidden) {\n            this.handleToggleFlag(cell);\n          } else if (\n            !cell.hidden &&\n            cell.adjacentCells === this.calculateAdjacentFlaggedCells(row, col)\n          ) {\n            this.revealAdjacentUnflaggedCells(row, col);\n            this.$forceUpdate();\n          }\n        }\n      }\n    }\n  }\n\n  private created() {\n    if (this.mines - 9 > this.rows * this.cols) {\n      this.mines = this.rows * this.cols - 9;\n    }\n\n    for (let row: number = 0; row < this.rows; row++) {\n      this.cells[row] = [];\n      for (let col: number = 0; col < this.cols; col++) {\n        this.cells[row][col] = {\n          row,\n          col,\n          mine: false,\n          exploded: false,\n          hidden: true,\n          flagged: false,\n          adjacentCells: 0,\n        };\n      }\n    }\n\n    const minefield = this;\n    window.addEventListener('keypress', event => {\n      if (event.keyCode === 32) {\n        minefield.handleSpace(event);\n      }\n    });\n  }\n\n  private updated() {\n    if (!this.activeMineField) {\n      return;\n    }\n\n    this.$emit('handle-ingame');\n\n    if (this.checkLoseConditions()) {\n      this.$emit('handle-lose');\n      this.activeMineField = false;\n\n      this.revealAllCells();\n      this.$forceUpdate();\n    } else if (this.checkWinConditions()) {\n      this.$emit('handle-win');\n      this.activeMineField = false;\n\n      this.revealAllCells();\n      this.$forceUpdate();\n    }\n  }\n\n  private getRandomInt(from: number, to: number): number {\n    return Math.floor(Math.random() * to) + from;\n  }\n\n  private generateMines(initRow: number, initCol: number): void {\n    let minesToPlant: number = this.mines;\n\n    while (minesToPlant > 0) {\n      const row: number = this.getRandomInt(0, this.rows);\n      const col: number = this.getRandomInt(0, this.cols);\n\n      if (\n        !this.cells[row][col].mine &&\n        (Math.abs(initRow - row) > 1 || Math.abs(initCol - col) > 1)\n      ) {\n        this.cells[row][col].mine = true;\n        minesToPlant--;\n      }\n    }\n\n    this.minesGenerated = true;\n    this.setAdjacentCells();\n  }\n\n  private setAdjacentCells(): void {\n    for (let row: number = 0; row < this.rows; row++) {\n      for (let col: number = 0; col < this.cols; col++) {\n        this.cells[row][col].adjacentCells = this.calculateAdjacentCells(\n          row,\n          col,\n        );\n      }\n    }\n  }\n\n  private validBoundaries(row: number, col: number) {\n    return row >= 0 && row < this.rows && col >= 0 && col < this.cols;\n  }\n\n  private calculateAdjacentCells(row: number, col: number): number {\n    let adjacentCells = 0;\n    for (const rowShift of [-1, 0, 1]) {\n      for (const colShift of [-1, 0, 1]) {\n        if (\n          this.validBoundaries(row + rowShift, col + colShift) &&\n          this.cells[row + rowShift][col + colShift].mine\n        ) {\n          adjacentCells += 1;\n        }\n      }\n    }\n\n    return adjacentCells;\n  }\n\n  private calculateAdjacentFlaggedCells(row: number, col: number): number {\n    let adjacentCells = 0;\n    for (const rowShift of [-1, 0, 1]) {\n      for (const colShift of [-1, 0, 1]) {\n        if (\n          this.validBoundaries(row + rowShift, col + colShift) &&\n          this.cells[row + rowShift][col + colShift].flagged\n        ) {\n          adjacentCells += 1;\n        }\n      }\n    }\n\n    return adjacentCells;\n  }\n\n  private revealAllCells() {\n    for (let row: number = 0; row < this.rows; row++) {\n      for (let col: number = 0; col < this.cols; col++) {\n        this.cells[row][col].hidden = false;\n      }\n    }\n  }\n\n  private revealCells(row: number, col: number): void {\n    if (!this.minesGenerated) {\n      this.generateMines(row, col);\n    }\n\n    if (!this.cells[row][col].hidden || this.cells[row][col].flagged) {\n      return;\n    }\n\n    this.cells[row][col].hidden = false;\n\n    if (this.cells[row][col].mine) {\n      this.cells[row][col].exploded = true;\n    }\n\n    if (this.cells[row][col].adjacentCells > 0) {\n      return;\n    }\n\n    for (const rowShift of [-1, 0, 1]) {\n      for (const colShift of [-1, 0, 1]) {\n        if (this.validBoundaries(row + rowShift, col + colShift)) {\n          this.revealCells(row + rowShift, col + colShift);\n        }\n      }\n    }\n  }\n\n  private revealAdjacentUnflaggedCells(row: number, col: number): void {\n    if (this.cells[row][col].flagged) {\n      return;\n    }\n\n    for (const rowShift of [-1, 0, 1]) {\n      for (const colShift of [-1, 0, 1]) {\n        if (\n          this.validBoundaries(row + rowShift, col + colShift) &&\n          !this.cells[row + rowShift][col + colShift].flagged\n        ) {\n          this.revealCells(row + rowShift, col + colShift);\n        }\n      }\n    }\n  }\n\n  private checkWinConditions(): boolean {\n    for (let row: number = 0; row < this.rows; row++) {\n      for (let col: number = 0; col < this.cols; col++) {\n        if (this.cells[row][col].hidden && !this.cells[row][col].mine) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  private checkLoseConditions(): boolean {\n    for (let row: number = 0; row < this.rows; row++) {\n      for (let col: number = 0; col < this.cols; col++) {\n        if (!this.cells[row][col].hidden && this.cells[row][col].mine) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"less\">\n#minefield {\n  letter-spacing: 0px;\n  font-size: 0px;\n}\n</style>\n"]}]}